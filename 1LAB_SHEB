#include "modAlphaCipher.h"
#include <locale>
#include <codecvt>

std::locale loc("ru_RU.UTF-8");
std::wstring_convert<std::codecvt_utf8<wchar_t>, wchar_t> codec;
using namespace std;
modAlphaCipher::modAlphaCipher(const std::string& skey)
{
 for (unsigned i=0; i < numAlpha.size(); i++) 
    alphaNum[numAlpha[i]]=i;
 key = convert(skey);
}

std::string modAlphaCipher::encrypt(const std::string& open_text)
{
 std::vector<int> work = convert(open_text);
 for(unsigned i=0; i < work.size(); i++) 
    work[i] = (work[i] + key[i % key.size()]) % alphaNum.size();
 return convert(work);
}

std::string modAlphaCipher::decrypt(const std::string& cipher_text)
{
 std::vector<int> work = convert(cipher_text);
 for(unsigned i=0; i < work.size(); i++) 
    work[i] = (work[i] + alphaNum.size() - key[i % key.size()]) % alphaNum.size();
 return convert(work);
}

inline std::vector<int> modAlphaCipher::convert(const std::string& s)
{
 std::wstring ws = codec.from_bytes(s); // перекодируем из UTF-8 в UTF-32
 std::vector<int> result;
 for(auto c:ws) 
    result.push_back(alphaNum[c]);
 return result;
}

inline std::string modAlphaCipher::convert(const std::vector<int>& v)
{
 std::string result;
 std::wstring ws = codec.from_bytes(result); // перекодируем из UTF-8 в UTF-32
 for(auto i:v) 
    ws.push_back(numAlpha[i]);
 result = codec.to_bytes(ws);
 return result;
}



#include "swapcipher.h"
#include <locale>
#include <codecvt>
std::locale loc("ru_RU.UTF-8");
std::wstring_convert<std::codecvt_utf8<wchar_t>, wchar_t> codec;

SwapCipher::SwapCipher(const int key1)
{
    key_stolbec = key1;
}

std::string SwapCipher::encrypt(const std::string& open_text)
{
    std::string result;
    std::wstring ws = codec.from_bytes(open_text);
    int i = 0, j = 0;
    key_stroka = ((ws.length() - 1) / key_stolbec) + 1;
    while(ws.length() % key_stroka != 0)
        ws += L'*';
    for (i = key_stolbec - 1; i >= 0; i--) 
        for (j = i; j < key_stolbec*key_stroka; j = j + key_stolbec)
            real_cp += ws[j];
    ws = L"";
    for (i = 0; i < key_stolbec*key_stroka; i++)
		if (((real_cp[i] >= L'А') && (real_cp[i] <= L'Я')) || real_cp[i] == L'Ё')
			ws += real_cp[i];
    result = codec.to_bytes(ws);
    return result;
}

std::string SwapCipher::decrypt(const std::string& cipher_text)
{
    std::string result;
    std::wstring ws;
    std::wstring ciphertext;
    int i = 0, j = 0;
    for (i = key_stroka; i > 0; i--) 
        for (j = (key_stroka * key_stolbec) - i; j >= 0; j = j - key_stroka)
            ciphertext += real_cp[j];
    for (i = 0; i < key_stolbec*key_stroka; i++)
		if (((ciphertext[i] >= L'А') && (ciphertext[i] <= L'Я')) || ciphertext[i] == L'Ё')
			ws += ciphertext[i];
    result = codec.to_bytes(ws);
    return result;
}




#include <iostream>
#include <cctype>
#include "Cipher.h"
using namespace std;
int main(int argc, char **argv)
{
	int key;
	string text;
	unsigned op;
	do {
		try {
			cout<<"Input operation (0-exit, 1-encrypt, 2-decrypt): ";
			cin>>op;
			if (op > 2)
				cout<<"Illegal operation\n";
			else if (op > 0) {
				cout<<"Input text: ";
				cin>>text;
				cout<<"Input key: ";
				cin>>key;
				Cipher cipher(key, text);
				if (op==1) {
					cout<<"Encrypted text: "<<cipher.encrypt(text)<<endl;
				} else {
					cout<<"Decrypted text: "<<cipher.decrypt(text)<<endl;
				}
			}
			
		} catch (const Error & e) {
			cerr<<"Error: "<<e.what()<<endl;
		}
	} while (op != 0);
	return 0;
}
