struct KeyB_fixture {
	modAlphaCipher * p;
	KeyB_fixture() {
		p = new modAlphaCipher("Б");
	}
	~KeyB_fixture() {
		delete p;
	}
};

SUITE(KeyTest)
{
	TEST(ValidKey) {
	CHECK_EQUAL("БВГБВ",modAlphaCipher("БВГ").encrypt("ААААА"));
	}
	TEST(LongKey) {
	CHECK_EQUAL("БВГДЕ",modAlphaCipher("БВГДЕЁЖЗИЙК").encrypt("ААААА"));
	}
	TEST(LowCaseKey) {		CHECK_EQUAL("БВГБВ",modAlphaCipher("бвг").encrypt("ААААА"));
	}
	TEST(DigitsInKey) {
		CHECK_THROW(modAlphaCipher cp("Б1"),cipher_error);
	}
	TEST(PunctuationInKey) {
		CHECK_THROW(modAlphaCipher cp("Б,С"),cipher_error);
	}
	TEST(WhitespaceInKey) {
		CHECK_THROW(modAlphaCipher cp("Б С"), cipher_error);
	}
	TEST(EmptyKey) {
		CHECK_THROW(modAlphaCipher cp(""),cipher_error);
	}
	TEST(WeakKey) {
		CHECK_THROW(modAlphaCipher cp("ААА"),cipher_error);
	}
}

SUITE(EncryptTest)
{
	TEST_FIXTURE(KeyB_fixture, UpCaseString) {
		CHECK_EQUAL("БВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯА", p->encrypt("АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ"));
	}
	TEST_FIXTURE(KeyB_fixture, LowCaseString) {
		CHECK_EQUAL("БВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯА", p->encrypt("абвгдеёжзийклмнопрстуфхцчшщъыьэюя"));
	}
	TEST_FIXTURE(KeyB_fixture, StringWithWhitspaceAndPunct) {
		CHECK_EQUAL("БВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯА", p->encrypt("АБВГ ДЕЁЖЗИЙ КЛМНОПР СТУФХЦЧ ШЩЪЫЬЭЮ Я!!!"));
	}
	TEST_FIXTURE(KeyB_fixture, StringWithNumbers) {
		CHECK_EQUAL("ТШБТУМЙГПДПОПГПДПДПЕБ", p->encrypt("Счастливого Нового 2019 года"));
	}
	TEST_FIXTURE(KeyB_fixture, EmptyString) {
		CHECK_THROW(p->encrypt(""),cipher_error);
	}
	TEST_FIXTURE(KeyB_fixture, NoAlphaString) {
		CHECK_THROW(p->encrypt("1234+8765=9999"),cipher_error);
	}
	TEST(MaxShiftKey) {
		CHECK_EQUAL("ЯАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮ", modAlphaCipher("Я").encrypt("АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ"));
	}
}

SUITE(DecryptText)
{
    TEST_FIXTURE(KeyB_fixture, UpCaseString) {
        CHECK_EQUAL("АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ", p->decrypt("БВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯА"));
    }
    TEST_FIXTURE(KeyB_fixture, LowCaseString) {
        CHECK_THROW(p->decrypt("бвгДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯА"),cipher_error);
    }
    TEST_FIXTURE(KeyB_fixture, WhitespaceString) {
        CHECK_THROW(p->decrypt("БВГД ЕЁЖЗИЙКЛ МНОПРСТУФХ ЦЧШЩЪЫЬЭЮЯА"),cipher_error);
    }
    TEST_FIXTURE(KeyB_fixture, DigitsString) {
        CHECK_THROW(p->decrypt("БВГДЕЁЖ222ЩЪЫЬЭЮЯА"),cipher_error);
    }
    TEST_FIXTURE(KeyB_fixture, PunctString) {
        CHECK_THROW(p->decrypt("БВГДЕ,ЫЬЭЮЯА"),cipher_error);
    }
    TEST_FIXTURE(KeyB_fixture, EmptyString) {
        CHECK_THROW(p->decrypt(""),cipher_error);
    }
    TEST(MaxShiftKey) {
        CHECK_EQUAL("АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ", modAlphaCipher("Я").decrypt("ЯАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮ"));
    }
}

int main(int argc, char **argv)
{
	return UnitTest::RunAllTests();
}



МОДУЛЬ ШИФРАТОРА МЕТОДОМ МАРШРУТНОЙ ПЕРЕСТАНОВКИ
#pragma once
#include <string>
#include <stdexcept>

using namespace std;

class Cipher
{
	int n;
	string getValidText(const string& s);
public:
	Cipher() = delete;
	Cipher(int key);
	string encrypt(const string& open_text);  //зашифрование
	string decrypt(const string& cipher_text);//расшифрование
};

class Error: public invalid_argument {
public:
    explicit Error (const string& what_arg):
        invalid_argument(what_arg) {}
    explicit Error (const char* what_arg):
        invalid_argument(what_arg) {}
};


#include "Cipher.h"

Cipher::Cipher(int key)
{
	if (key < 2) 
		throw Error(string("Invalid key"));
	n = key;
}

string Cipher::encrypt(const string& open_text)
{
	int m = ((getValidText(open_text).size() - 1)/n + 1);
	char ** value = new char * [m];
	for (int i = 0; i < m; i++) {
		value[i] = new char [n];
	}
//заполнение таблицы " "
	for (int i=0; i < m; i++)
		for (int j=0; j < n; j++)
			value[i][j] = '*';
//заполнение таблицы текстом
	for (int i = 0; i < getValidText(open_text).size(); i ++)
		value[i/n][i%n] = getValidText(open_text)[i];
//вывод таблицы в строку
	string cipher_text;
	for (int i = n - 1; i >= 0; i --)
		for (int j = 0; j < m; j++)
			cipher_text = cipher_text + value[j][i];
	for (int i = 0; i < m; i++) {
		delete [] value[i];
	}
	delete [] value;
	return cipher_text;
}

string Cipher::decrypt(const string& cipher_text)
{
	int m = ((getValidText(cipher_text).size() - 1)/n + 1);
	char ** value = new char * [m];
	for (int i = 0; i < m; i++) {
		value[i] = new char [n];
	}
	//заполнение таблицы " "
	for (int i=0; i < m; i++)
		for (int j=0; j < n; j++)
			value[i][j] = '*';
//заполнение таблицы текстом
	for (int i = 0; i < getValidText(cipher_text).size(); i ++)
		value[i%m][i/m] = getValidText(cipher_text)[i];
//вывод таблицы в строку
	string open_text;
	for (int i = 0; i < m; i ++)
		for (int j = n - 1; j >= 0; j--)
			open_text = open_text + value[i][j];
	for (int i = 0; i < m; i++) {
		delete [] value[i];
	}
	delete [] value;
	return open_text;
}

string Cipher::getValidText(const string& s)
{
	string tmp(s);
	if (s.empty())
		throw Error("Empty text");
	if (n >= s.size()) {
		throw Error(string("Too short string"));
	}
	for (auto c:tmp)
		if (!isalpha(c)) {
			throw Error(string("Invalid text"));
		}
	return tmp;
}
ПРИЛОЖЕНИЕ В
ТЕСТЫ ДЛЯ МОДУЛЯ ШИФРАТОРА МЕТОДОМ МАРШРУТНОЙ ПЕРЕСТАНОВКИ
/*Тестиравание для модуля Cipher
 *Язык прогшраммирования: С++

struct Key4_fixture {
	Cipher * p;
	Key4_fixture() {
		p = new Cipher(4);
	}
	~Key4_fixture() {
		delete p;
	}
};

SUITE(KeyTest)
{
	TEST(ValidKrKey) {
		CHECK_EQUAL("qkuxecoohirftubn", Cipher(4).encrypt("thequickbrounfox"));
	}
	TEST(ValidNotKrKey) {
		CHECK_EQUAL("uro*qbf*ekn*hcu*tiox", Cipher(5).encrypt("thequickbrounfox"));
	}
	TEST(NotIntKey) {
		CHECK_EQUAL("qkuxecoohirftubn", Cipher(4.9).encrypt("thequickbrounfox"));
	}
	TEST(ZeroKey) {
		CHECK_THROW(Cipher cp(0),Error);
	}
	TEST(WeakKey) {
		CHECK_THROW(Cipher cp(1),Error);
	}
	TEST(NegativeKey) {
		CHECK_THROW(Cipher cp(-4),Error);
	}
}
SUITE(EncryptTest)
{
	TEST_FIXTURE(Key4_fixture, UpCaseString) {
	CHECK_EQUAL("QKUXECOOHIRFTUBN", p>encrypt("THEQUICKBROUNFOX"));
	}
	TEST_FIXTURE(Key4_fixture, LowCaseString) {
		CHECK_EQUAL("qkuxecoohirftubn", p- >encrypt("thequickbrounfox"));
	}
	TEST_FIXTURE(Key4_fixture, LowAndUpCaseString) {
		CHECK_EQUAL("QkuxecoohirFTuBn", p - >encrypt("TheQuickBrounFox"));
	}
	TEST_FIXTURE(Key4_fixture, SpaceAndPunctString) {
		CHECK_THROW(p->encrypt("the quick broun fox!!!"),Error);
	}
	TEST_FIXTURE(Key4_fixture, digitString) {
		CHECK_THROW(p- >encrypt("the55quickbrounfox"), Error);
	}
	TEST_FIXTURE(Key4_fixture, EmptyString) {
		CHECK_THROW(p->encrypt(""),Error);
	}
	TEST_FIXTURE(Key4_fixture, noAlphaString) {
		CHECK_THROW(p->encrypt("123+123=246"),Error);
	}
	TEST_FIXTURE(Key4_fixture, ShortString) {
		CHECK_THROW(p->encrypt("fox"),Error);
	}
	TEST_FIXTURE(Key4_fixture, EqualKeyString) {
		CHECK_THROW(p->encrypt("pink"),Error);
	}
}

SUITE(DecryptTest)
{
	TEST_FIXTURE(Key4_fixture, UpCaseString) {
		CHECK_EQUAL("THEQUICKBROUNFOX", p- >decrypt("QKUXECOOHIRFTUBN"));
	}
	TEST_FIXTURE(Key4_fixture, LowCaseString) {
		CHECK_EQUAL("thequickbrounfox", p- >decrypt("qkuxecoohirftubn"));
	}
	TEST_FIXTURE(Key4_fixture, LowAndUpCaseString) {
		CHECK_EQUAL("TheQuickBrounFox", p- >decrypt("QkuxecoohirFTuBn"));
	}
	TEST_FIXTURE(Key4_fixture, PunctString) {
		CHECK_THROW(p- >decrypt("qkuxe,coohirftubn"), Error);
	}
	TEST_FIXTURE(Key4_fixture, digitString) {
		CHECK_THROW(p- >decrypt("qkuxecoohirftubn55"), Error);
	}
	TEST_FIXTURE(Key4_fixture, EmptyString) {
		CHECK_THROW(p->decrypt(""),Error);
	}
	TEST_FIXTURE(Key4_fixture, SpaceString) {
		CHECK_THROW(p->decrypt("qkuxe coohirftubn"), Error);
	}
	TEST_FIXTURE(Key4_fixture, ShortString) {
		CHECK_THROW(p->decrypt("fox"),Error);
	}
	TEST_FIXTURE(Key4_fixture, EqualKeyString) {
		CHECK_THROW(p->decrypt("pink"),Error);
	}
}
int main(int argc, char **argv)
{
	return UnitTest::RunAllTests();
}
