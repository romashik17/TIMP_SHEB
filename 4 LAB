Документирование modAlphaCipher  
/** @file modAlphaCipher.h  
*	@version 1.0  
*	@date 12.06.2019  
*	@copyright ИБСТ ПГУ  
*	@warning Это учебный пример  
*	@brief Заголовочный файл для 
модуля modAlphaCipher  
*/  
#pragma once  
#include <vector> 
#include <string>  
#include <codecvt>  
#include <locale>  
#include <map>  
/** @brief Шифрование методом Гронсфельда  
*	@details Ключ устанавливается в  
конструкторе.Длязашифровывания и расшифровывания предназначены методы encrypt и decrypt.  
*	@warning Реализация только для русского  
языка*/ class modAlphaCipher { private:  
std::wstring numAlpha =  
    
L"АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ";///<  
Русский алфавит попорядку  
std::map <wchar_t,int> alphaNum; ///<  
Ассоциативный массив"номер по символу"  
std::vector <int> key; ///< Ключ 
/**  
*	@brief Преобразование строка-
вектор  
*	@param [in] ws Строка в 
кодировке UTF-32  
*	@return Целочисленный вектор*/  
std::vector<int> convert(const std::wstring& ws);  
/**  
*	@brief Преобразование вектор-
строка  
*	@param [in] v Целочисленный 
вектор  
* @return Строка в кодировке UTF8*/  
std::string convert(const std::vector<int>& v); /**  
*	@brief Валидация ключа  
*	@param [in] ws Ключ в кодировке 
UTF-32.  
Недолжен быть пустой строкой.  
*	Строчные символы автоматически  
преобразуются кпрописным.  
*	@return Валидный ключ в кодировке UTF-32  
*	@throw cipher_error ключ пустой 
или  
содержитнедопустимые символы */ std::wstring getValidKey(const std::wstring & ws); /**  
*	@brief Валидация открытого 
текста  
*	@param [in] ws Открытый текст в  
кодировке UTF-32. Не должен быть пустой строкой.  
*	Строчные символы автоматически  
преобразуются кпрописным.  
*	@return Валидный открытый текст 
в кодировке UTF-32  
*	@throw cipher_error текст пустой 
или  
содержитнедопустимые символы  
*/ inline std::wstring getValidOpenText(const  
std::wstring & ws);  
/**  
*	@brief Валидация зашифрованного 
текста  
*	@param [in] ws Зашифрованный 
текст в  
кодировкеUTF-32. Не должен быть пустой строкой.  
*	Не должен содержать строчные символы и  
не-буквы.  
*	@return Валидный зашифрованный 
текст  
вкодировке UTF-32  
*	@throw cipher_error текст пустой 
или  
содержитнедопустимые символы  
*/ inline std::wstring getValidCipherText(const  
std::wstring &                                        ws);  
public: /**  
*	@brief Конструктор без 
параметров  
*	@details Запрещен  
*/  modAlphaCipher()=delete; /**  
*	@brief Конструктор для установки  
ключа  
*	@details Ключ проверяется на 
валидность.  
Переводится в кодировку UTF-32.  
*	Формируется вектор-ключ.  
*	@param [in] skey Ключ в кодировке  
UTF-8  
*	@throw cipher_error ключ  
вырожденный*/ modAlphaCipher(const std::string& skey); /**  
*	@brief Зашифровывание  
*	@param [in] open_text Открытый 
текст  
вкодировке UTF-8. Не должен быть пустой строкой.  
*	Строчные символы автоматически  
преобразуются кпрописным.Все не-буквы удаляются.  
*	@return Зашифрованная строка в  кодировке UTF-8  
*	@throw cipher_error текст пустой  
*/  
std::string encrypt(const std::string&  
open_text);  
/**  
*	@brief Расшифровывание  
*	@param [in] cipher_text  
Зашифрованный текст вкодировке UTF-8. Не должен быть пустой строкой.  
*	Не должен содержать строчные 
символы  и не-буквы.  
*	@return Расифрованная строка в  кодировке UTF-8  
*	@throw cipher_error текст пустой  
*/  
std::string decrypt(const std::string&  
cipher_text); 
/**  
*	@brief Перевод из кодировки UTF8 в  
UTF-32  
*	@param [in] s Строка в кодировке  
UTF-8  
*	@return Строка в кодировке UTF-
32*/  std::wstring towstr(const std::string& s); /**  
*	@brief Перевод из кодировки UTF32 в  
UTF-8  
*	@param [in] s Строка в кодировке  
UTF-32  
*	@return Строка в кодировке UTF-8  
*/ std::string fromwstr(const 
std::wstring& ws);  
}; /**@brief Классисключение.  
*	@details Призводный от класса 
invalid_argument.  
*	При перегрузке конструкторов 
явно  
указаны вызовконструктора базового класса с параметром.  
*/ class cipher_error: public std::invalid_argument {  
public: ...................................................................................................................................................... 
5  


explicit cipher_error (const std::string&  
what_arg):std::invalid_argument(what_arg) {}  
explicit cipher_error (const char* what_arg):std::invalid_argument(what_arg) {}  
};  
 
